org: igorkulishov
app: chat-app
service: placed-orders-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-mocha-plugin

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    DYNAMODB_TABLE_USERS_PLACED_ORDERS: ${self:service}-${opt:stage, self:provider.stage}-users-placed-orders
    DYNAMODB_TABLE_ORDER_DETAILS: ${self:service}-${opt:stage, self:provider.stage}-orders-details
    ACCESS_TOKEN_SECRET: 'secret.key'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_ORDER_DETAILS}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_ORDER_DETAILS}/index/*"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USERS_PLACED_ORDERS}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USERS_PLACED_ORDERS}/index/*"

functions:
  auth:
    handler: auth/auth.auth
    cors: true

  create:
    handler: orders/create-user-order.create
    events:
      - http:
          path: orders
          method: post
          authorizer: auth
          cors: true
          integration: LAMBDA

  list:
    handler: orders/list-all-users-orders.list
    events:
      - http:
          path: orders
          method: get
          authorizer: auth
          cors: true
          integration: LAMBDA

  getByUserId:
    handler: orders/get-by-userid.get
    events:
      - http:
          path: orders/userid/{id}
          method: get
          authorizer: auth
          cors: true
          integration: LAMBDA

  getByOrderId:
    handler: orders/get-by-orderid.get
    events:
      - http:
          path: orders/{id}
          method: get
          authorizer: auth
          cors: true
          integration: LAMBDA

  update:
    handler: orders/update-order.update
    events:
      - http:
          path: orders/{id}
          method: put
          authorizer: auth
          cors: true
          integration: LAMBDA

  delete:
    handler: orders/delete-order.delete
    events:
      - http:
          path: orders/{id}
          method: delete
          authorizer: auth
          cors: true
          integration: LAMBDA

# Global secondary index (GSI) has to be defined in 'AttributeDefinitions'
# We defined two GSIs: usersGSI, ordersGSI
# 'KeySchema' defines primary/partition key
# 'AttributeDefinitions' defines primary/partition key and secondary index(s) (GSI)
# 'GlobalSecondaryIndexes' defines GSI
# 'Projections' defines returns fields for secondary index(s)

resources:
  Resources:
    PlacedOrdersDetails:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userid
          AttributeType: S
        - AttributeName: orderid
          AttributeType: S
        GlobalSecondaryIndexes:
        - IndexName: usersGSI
          KeySchema:
          - AttributeName: userid
            KeyType: HASH
          Projection:
            NonKeyAttributes:
            - orderDetails
            - checked
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: ordersGSI
          KeySchema:
            - AttributeName: orderid
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - orderDetails
              - checked
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_ORDER_DETAILS}
    UserPlacedOrders:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_USERS_PLACED_ORDERS}
# Required for CORS
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
